/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.enerfrisoft.exportarFormatos;

import com.enerfrisoft.dao.DataSourceClass;
import com.enerfrisoft.modal.Modal;
import com.enerfrisoft.tools.EmptyReport;
import com.enerfrisoft.tools.Report;
import com.enerfrisoft.tools.UniversalDAO;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author sebastianaf
 */
public class FormViewExport extends javax.swing.JFrame {

    private String query;
    
    private String view;
    private String reportName;
    private DataSourceClass dataSource;
    private Connection conn;
    private Connection defaultServerConn;

    public FormViewExport(String view, String query, String reportName, DataSourceClass dataSource,Connection conn) {
        
        this.conn = conn;
        this.dataSource = dataSource;
        this.reportName = reportName;
        constructor(query, view);
    }

    private void constructor(String query, String view) {
        this.view = view;
        this.query = query;
        initComponents();
        buildTable(query);
        com.enerfrisoft.tools.Visual.windowIcon(this);
        connectionStatus.doClick();
    }

    private void buildTable(String query) {
        try {
            
            Statement sentencia = conn.createStatement();
            
            ResultSet result = sentencia.executeQuery(query);
            
            int columns = result.getMetaData().getColumnCount();
            

            //Table"s data
            ArrayList<ArrayList<String>> data = new ArrayList<>();
            
            int rows = 0;
            for (int i = 0; i < columns; i++) {
                data.add(new ArrayList<>());
                while (result.next()) {
                    data.get(i).add(result.getString(i + 1));
                    if (i == 0) {
                        rows++;
                    }
                }
                result.beforeFirst();
            }
            
            ArrayList<String> columnNames = new ArrayList<>();

            for (int i = 1; i <= columns; i++) {
                columnNames.add(result.getMetaData().getColumnName(i));
            }

            DefaultTableModel tableModel = new DefaultTableModel() {
                public boolean isCellEditable(int rowIndex, int mColIndex) {
                    return false;
                }
            };

            Vector column;
            for (int i = 0; i < columns; i++) {
                column = new Vector();
                for (int j = 0; j < rows; j++) {
                    column.add(data.get(i).get(j));
                }
                tableModel.addColumn(columnNames.get(i), column);
            }

            table.getTableHeader().setReorderingAllowed(false);
            table.setModel(tableModel);

//            jScrollPane1.setViewportView(table);
            
            sentencia.close();
            result.close();

        } catch (Exception e) {
            System.out.println(e.getLocalizedMessage());
            System.out.println(e.getStackTrace()[0].getLineNumber());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        export = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        connectionStatus = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setTitle(view);
        setResizable(false);

        export.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/enerfrisoft/gui/sources/Export 2Pdf_20px.png"))); // NOI18N
        export.setToolTipText("Exportar PDF");
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/enerfrisoft/gui/sources/Refresh_16px.png"))); // NOI18N
        jButton3.setToolTipText("Actualizar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        connectionStatus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/enerfrisoft/gui/sources/connection.png"))); // NOI18N
        connectionStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionStatusActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        table.setGridColor(new java.awt.Color(204, 204, 204));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Exportar formato: " + view);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(connectionStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(export)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(connectionStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(export, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void connectionStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionStatusActionPerformed
//        try {
//            Thread verificacion = new Thread(new VerifyConnection(connectionStatus, this));
//            verificacion.start();
//        } catch (Exception e) {
//            Thread report = new Thread(new QueryError(new com.Empresa1.error.Error(e)));
//            report.start();
//        }
    }//GEN-LAST:event_connectionStatusActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        buildTable(query);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked

    }//GEN-LAST:event_tableMouseClicked

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        if (table.getSelectedRow() == -1) {
            Modal.show("Aviso", "Debe selecionar un documento de la lista", this, "", "warning");
        } else {
            String consecutivo = table.getModel().getValueAt(table.getSelectedRow(), 0).toString();
            //Comprobar manifiesto viaje vac√≠o
            String tipo_manifiesto = UniversalDAO.getString("call getTipoManifiesto('"+ consecutivo  +"')", conn);
            System.out.println(tipo_manifiesto);
            if(tipo_manifiesto.equals("W")){
                EmptyReport.view(reportName, this, consecutivo, conn);
            }else{
                Report.view(reportName, this, consecutivo, conn);
            }
        }
    }//GEN-LAST:event_exportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormViewExport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.LookAndFeelInfo[] iaf = UIManager.getInstalledLookAndFeels();
                    UIManager.setLookAndFeel(iaf[3].getClassName());
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                new FormViewExport("Remesa", "select * from manifiestos_exportar","ordenCargue", new DataSourceClass(), new DataSourceClass().conectar(1)).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectionStatus;
    private javax.swing.JButton export;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
